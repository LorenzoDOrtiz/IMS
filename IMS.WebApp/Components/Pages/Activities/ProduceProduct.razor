@page "/produce"

@attribute [Authorize(Policy = "Productions")]
@attribute [Authorize(Policy = "Admin")]

@rendermode InteractiveServer

@using static IMS.WebApp.Components.Controls.Common.AutoCompleteComponent

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime

@inject IProduceProductUseCase ProduceProductUseCase
@inject IViewProductsByNameUseCase ViewProductsByNameUseCase
@inject IViewProductByIdUseCase ViewProductByIdUseCase

<h3>Produce Product</h3>
<br />

<EditForm id="produce-form" Model="produceViewModel" OnValidSubmit="Produce">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="po">Production #</label>
        <InputText id="po" @bind-Value="produceViewModel.ProductionNumber" class="form-control" />
    </div>

    <br />

    <div class="card">
        <div class="card-body">
            <div class="form-group">
                <AutoCompleteComponent Label="Product to Produce"
                                       SearchFunction="SearchProduct"
                                       OnItemSelected="HandleItemSelected" />
            </div>
        </div>
    </div>
    <br />
    <div class="form-group">
        <label for="qty">Quantity</label>
        <InputNumber id="qty" @bind-Value="produceViewModel.QuantityToProduce" class="form-control" />
    </div>
    <br />
    <button type="submit" class="btn btn-primary">Produce</button>
</EditForm>

@code {
    private ProduceViewModel produceViewModel = new();
    private Product? selectedProduct;

    private AuthenticationState? authState;

    protected override async Task OnInitializedAsync()
    {
        authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender)
        {
            JSRuntime.InvokeVoidAsync("preventFormSubmission", "produce-form");
        }
    }

    private async Task<List<ItemViewModel>?> SearchProduct(string name)
    {
        var list = await ViewProductsByNameUseCase.ExecuteAsync(name);
        if (list is null) return null;

        return list.Select(x => new ItemViewModel { Id = x.ProductId, Name = x.ProductName })?.ToList();
    }

    private async void HandleItemSelected(ItemViewModel item)
    {
        selectedProduct = await ViewProductByIdUseCase.ExecuteAsync(item.Id);

        produceViewModel.ProductId = item.Id;
        produceViewModel.Product = selectedProduct;
    }

    private async Task Produce()
    {
        string userName = string.Empty;

        if (authState?.User?.Identity?.IsAuthenticated ?? false)
        {
            userName = authState.User.Identity.Name ?? string.Empty;
        }

        await ProduceProductUseCase.ExecuteAsync(
            produceViewModel.ProductionNumber,
            selectedProduct,
            produceViewModel.QuantityToProduce,
            userName);

        produceViewModel = new();
        selectedProduct = null;
    }
}
